/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RankingImport } from './routes/ranking'
import { Route as DashboardRouteImport ./routes/(auth)/signins/dashboard/route'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DashboardTasksImport } from './routes/dashboard/tasks'
import { Route as DashboardShopImport } from './routes/dashboard/shop'
import { Route as DashboardLeaderboardImport } from './routes/dashboard/leaderboard'
import { Route as authSignupImport } from './routes/(auth)/signup'
import { Route as authSigninImport } from './routes/(auth)/signin'

// Create/Update Routes

const RankingRoute = RankingImport.update({
  id: '/ranking',
  path: '/ranking',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardTasksRoute = DashboardTasksImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardShopRoute = DashboardShopImport.update({
  id: '/shop',
  path: '/shop',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardLeaderboardRoute = DashboardLeaderboardImport.update({
  id: '/leaderboard',
  path: '/leaderboard',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const authSignupRoute = authSignupImport.update({
  id: '/(auth)/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const authSigninRoute = authSigninImport.update({
  id: '/(auth)/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/ranking': {
      id: '/ranking'
      path: '/ranking'
      fullPath: '/ranking'
      preLoaderRoute: typeof RankingImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/signin': {
      id: '/(auth)/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof authSigninImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/leaderboard': {
      id: '/dashboard/leaderboard'
      path: '/leaderboard'
      fullPath: '/dashboard/leaderboard'
      preLoaderRoute: typeof DashboardLeaderboardImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/shop': {
      id: '/dashboard/shop'
      path: '/shop'
      fullPath: '/dashboard/shop'
      preLoaderRoute: typeof DashboardShopImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/tasks': {
      id: '/dashboard/tasks'
      path: '/tasks'
      fullPath: '/dashboard/tasks'
      preLoaderRoute: typeof DashboardTasksImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardRouteImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteRouteChildren {
  DashboardLeaderboardRoute: typeof DashboardLeaderboardRoute
  DashboardShopRoute: typeof DashboardShopRoute
  DashboardTasksRoute: typeof DashboardTasksRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardLeaderboardRoute: DashboardLeaderboardRoute,
  DashboardShopRoute: DashboardShopRoute,
  DashboardTasksRoute: DashboardTasksRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/ranking': typeof RankingRoute
  '/signin': typeof authSigninRoute
  '/signup': typeof authSignupRoute
  '/dashboard/leaderboard': typeof DashboardLeaderboardRoute
  '/dashboard/shop': typeof DashboardShopRoute
  '/dashboard/tasks': typeof DashboardTasksRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/ranking': typeof RankingRoute
  '/signin': typeof authSigninRoute
  '/signup': typeof authSignupRoute
  '/dashboard/leaderboard': typeof DashboardLeaderboardRoute
  '/dashboard/shop': typeof DashboardShopRoute
  '/dashboard/tasks': typeof DashboardTasksRoute
  '/dashboard': typeof DashboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/ranking': typeof RankingRoute
  '/(auth)/signin': typeof authSigninRoute
  '/(auth)/signup': typeof authSignupRoute
  '/dashboard/leaderboard': typeof DashboardLeaderboardRoute
  '/dashboard/shop': typeof DashboardShopRoute
  '/dashboard/tasks': typeof DashboardTasksRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/ranking'
    | '/signin'
    | '/signup'
    | '/dashboard/leaderboard'
    | '/dashboard/shop'
    | '/dashboard/tasks'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/ranking'
    | '/signin'
    | '/signup'
    | '/dashboard/leaderboard'
    | '/dashboard/shop'
    | '/dashboard/tasks'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/ranking'
    | '/(auth)/signin'
    | '/(auth)/signup'
    | '/dashboard/leaderboard'
    | '/dashboard/shop'
    | '/dashboard/tasks'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  RankingRoute: typeof RankingRoute
  authSigninRoute: typeof authSigninRoute
  authSignupRoute: typeof authSignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  RankingRoute: RankingRoute,
  authSigninRoute: authSigninRoute,
  authSignupRoute: authSignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/ranking",
        "/(auth)/signin",
        "/(auth)/signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/leaderboard",
        "/dashboard/shop",
        "/dashboard/tasks",
        "/dashboard/"
      ]
    },
    "/ranking": {
      "filePath": "ranking.tsx"
    },
    "/(auth)/signin": {
      "filePath": "(auth)/signin.tsx"
    },
    "/(auth)/signup": {
      "filePath": "(auth)/signup.tsx"
    },
    "/dashboard/leaderboard": {
      "filePath": "dashboard/leaderboard.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/shop": {
      "filePath": "dashboard/shop.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/tasks": {
      "filePath": "dashboard/tasks.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
